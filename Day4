/*Explanation 
there many questions i asked hima and give me a good explanation */
#https://chatgpt.com/c/6759cd1a-8374-8007-9b29-740e3ffa272c

"the IDE online"
/*https://sqliteonline.com/*/



/****************************************************************************************************************************/


#Leetcode 1
#https://github.com/mrinal1704/SQL-Leetcode-Challenge/blob/master/Easy/Customer%20placing%20the%20largest%20number%20of%20orders%20.sql

/**solution 1**/ 
select customer_number
from Orders 
group by customer_number
order by count(*) desc
limit 1

/*Solution 2*/

With t1 as 
(
  Select customer_number, 
  Rank() over(order by count(customer_number) desc) as rk
  from orders
  group by customer_number
) 

Select t1.customer_number
from t1
where t1.rk=1





/****************************************************************************************************************************/


/****************************************************************************************************************************/

#Leetcode 2
#https://github.com/mrinal1704/SQL-Leetcode-Challenge/blob/master/Easy/Customers%20who%20never%20order.sql

/**solution 1**/ 
SELECT  c.name AS Customers
FROM Customers c
LEFT JOIN Orders o ON c.id = o.customerId
WHERE o.customerId IS NULL;



/**solution 2**/ 

-- Write your PostgreSQL query statement below

SELECT c.name as Customers 
from Customers c
WHERE c.id not in (select o.customerId from Orders o);



/****************************************************************************************************************************/


/****************************************************************************************************************************/




#Leetcode 3
#https://github.com/mrinal1704/SQL-Leetcode-Challenge/blob/master/Easy/Delete%20duplicate%20emails.sql

/**solution 1**/ 

DELETE FROM Person
WHERE id NOT IN (
    SELECT MIN(id)
    FROM Person
    GROUP BY email
);


/**solution 2**/ 

DELETE p1
FROM Person p1,
     Person p2
WHERE p1.email = p2.email
  AND p1.id > p2.id;


/**solution 3**/ 


With t1 as
(
 Select *,
    row_number() over(partition by email order by id) as rk
    from person
)
Delete from person
where id in (Select t1.id from t1 where t1.rk>1)



/****************************************************************************************************************************/


/****************************************************************************************************************************/

#Leetcode 4
#https://github.com/mrinal1704/SQL-Leetcode-Challenge/blob/master/Easy/Duplicate%20Emails.sql

/**solution 1**/ 
SELECT email from Person
group by email
having count(email) > 1;


/**solution 2**/ 
SELECT DISTINCT(p1.email)
FROM Person p1, Person p2
WHERE p1.id <> p2.id AND p1.email = p2.email;


/**solution 3**/ 
SELECT DISTINCT(p1.email)
FROM Person p1
JOIN Person p2
ON p1.email = p2.email AND p1.id <> p2.id;




/****************************************************************************************************************************/


/****************************************************************************************************************************/

#Leetcode 5
#https://github.com/mrinal1704/SQL-Leetcode-Challenge/blob/master/Easy/Employee%20Bonus.sql

/**solution 1**/ 
SELECT name, bonus
FROM Employee ep
FULL JOIN Bonus bs
ON bs.empId = ep.empId
WHERE bs.bonus < 1000 OR bs.bonus IS NULL;




/**solution 2**/ 

SELECT name, bonus
FROM Employee e
LEFT JOIN Bonus b
ON e.empId = b.empId
WHERE b.bonus < 1000 OR b.bonus IS NULL;





/****************************************************************************************************************************/


/****************************************************************************************************************************/

#Problem 1
#https://github.com/faizanxmulla/sql-portfolio/blob/main/ankit-bansal-sql/medium-complex-sql-questions-playlist/08-amazon-join-based-problem.md

---Solution
"Can Found in the chatGPT"


/****************************************************************************************************************************/


/****************************************************************************************************************************/

#Problem 2
#https://github.com/faizanxmulla/sql-portfolio/blob/main/ankit-bansal-sql/medium-complex-sql-questions-playlist/09-repeat-purchases-on-multiple-days.md

/**solution 1**/ 
SELECT COUNT(DISTINCT user_id) AS unique_users
FROM purchases
GROUP BY user_id, product_id
HAVING COUNT(DISTINCT purchase_date) >= 2;





-- Solution 2: 

WITH purchases_by_users AS (
    SELECT  *, 
            DENSE_RANK() OVER(PARTITION BY user_id, product_id ORDER BY DATE(purchase_date)) AS num_purchases
    FROM    purchases
)
SELECT COUNT(DISTINCT user_id) AS users_num
FROM   purchases_by_users
WHERE  num_purchases > 1


/****************************************************************************************************************************/


/****************************************************************************************************************************/

#Problem 3
#https://github.com/faizanxmulla/sql-portfolio/blob/main/ankit-bansal-sql/medium-complex-sql-questions-playlist/10-spotify-top-5-artists.md

---https://datalemur.com/questions/top-fans-rank

/**solution 1**/ 
WITH top_10_cte AS (
  SELECT 
    artists.artist_name,
    DENSE_RANK() OVER (
      ORDER BY COUNT(songs.song_id) DESC) AS artist_rank
  FROM artists
  INNER JOIN songs
    ON artists.artist_id = songs.artist_id
  INNER JOIN global_song_rank AS ranking
    ON songs.song_id = ranking.song_id
  WHERE ranking.rank <= 10
  GROUP BY artists.artist_name
)

SELECT artist_name, artist_rank
FROM top_10_cte
WHERE artist_rank <= 5;

---Another explanation can found here : https://datalemur.com/questions/top-fans-rank



-- Solution 2: 
WITH CTE AS (
    SELECT   artist_name, 
             DENSE_RANK() over(ORDER BY COUNT(song_id) desc) as artist_rank 
    FROM     artists a JOIN songs s USING(artist_id)
                       JOIN global_song_rank g_rank USING(song_id)
    WHERE    g_rank.rank <= 10
    GROUP BY 1
)
SELECT artist_name, artist_rank
FROM   CTE
WHERE  artist_rank <= 5

/****************************************************************************************************************************/


/****************************************************************************************************************************/
