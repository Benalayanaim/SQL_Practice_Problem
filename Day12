/*Explanation 
there many questions i asked hima and give me a good explanation */
#https://chatgpt.com/c/676934a8-97d8-8007-ae4f-e7d261a03cca

"the IDE online"
/*https://sqliteonline.com/*/



/****************************************************************************************************************************/


#Leetcode 1
#https://github.com/mrinal1704/SQL-Leetcode-Challenge/blob/master/Easy/Triangle%20Judgement.sql

/**solution 1**/ 

--Following the triangle inequeality theoram
--trainagle can be formed only when the conditions are satisfied
--x+y>z,y+z>x,x+z>y
--So only when means CASE WHEN in sql.Implmenting it
SELECT 
    x,
    y,
    z,
    CASE 
        WHEN x+y>z AND y+z>x AND x+z>y THEN 'Yes'
        ELSE 'No'
    END AS triangle
FROM Triangle



/****************************************************************************************************************************/


/****************************************************************************************************************************/

#Leetcode 2
#https://github.com/mrinal1704/SQL-Leetcode-Challenge/blob/master/Easy/User%20Activity%20for%20past%2030%20days%202.sql

/**solution 1**/     

WITH ValidSessions AS (
    SELECT DISTINCT
        user_id,
        session_id
    FROM
        Activity
    WHERE
        activity_date BETWEEN '2019-06-28' AND '2019-07-27'
),
SessionCount AS (
    SELECT
        user_id,
        COUNT(session_id) AS session_count
    FROM
        ValidSessions
    GROUP BY
        user_id
)
SELECT
     COALESCE(ROUND(AVG(session_count), 2), 0) AS average_sessions_per_user
FROM
    SessionCount;


/**solution 2**/     

SELECT COALESCE(ROUND(AVG(session_count), 2), 0) AS average_sessions_per_user
FROM (
    SELECT COUNT(DISTINCT session_id) AS session_count
    FROM Activity
    WHERE activity_date BETWEEN '2019-06-28' AND '2019-07-27'
    GROUP BY user_id
) grouped_sessions;


/****************************************************************************************************************************/


/****************************************************************************************************************************/

#Leetcode 3
#https://github.com/mrinal1704/SQL-Leetcode-Challenge/blob/master/Easy/User%20activity%20for%20past%2030%20days%201.sql


/**solution 1**/ 
SELECT
    activity_date AS day,
    COUNT(DISTINCT user_id) AS active_users
FROM
    Activity
WHERE
    activity_date BETWEEN '2019-06-28' AND '2019-07-27'
GROUP BY
    activity_date;



/**solution 2**/ 
select
    activity_date as day,
    count(distinct user_id) as active_users
from 
    Activity
where
    activity_date between '2019-07-27'::date - 29 and '2019-07-27'
group by
    activity_date
/****************************************************************************************************************************/


/****************************************************************************************************************************/

#Leetcode 4
#https://github.com/faizanxmulla/sql-portfolio/blob/main/ankit-bansal-sql/medium-complex-sql-questions-playlist/27-mcq-sql-assessment.md

/**solution 1**/ 
SELECT 
    c.country_name,
    CASE
        WHEN AVG(w.weather_state) <= 15 THEN 'Cold'
        WHEN AVG(w.weather_state) >= 25 THEN 'Hot'
        ELSE 'Warm'
    END AS weather_type
FROM 
    Weather w
JOIN 
    Countries c
ON 
    w.country_id = c.country_id
WHERE 
    w.day BETWEEN '2019-11-01' AND '2019-11-30'
GROUP BY 
    c.country_name;





/****************************************************************************************************************************/


/****************************************************************************************************************************/

#Problem 1
#https://github.com/faizanxmulla/sql-portfolio/blob/main/ankit-bansal-sql/medium-complex-sql-questions-playlist/27-mcq-sql-assessment.md
---Solution 1
SELECT
    g.match_id,
    g.match_date,
    g.team1,
    COALESCE(SUM(CASE WHEN goal.team_id = g.team1 THEN 1 ELSE 0 END), 0) AS score1,
    g.team2,
    COALESCE(SUM(CASE WHEN goal.team_id = g.team2 THEN 1 ELSE 0 END), 0) AS score2
FROM
    game g
LEFT JOIN
    goal
ON
    g.match_id = goal.match_id
GROUP BY
    g.match_id, g.match_date, g.team1, g.team2
ORDER BY
    g.match_id;


---Solution 2:
WITH GoalsPerTeam AS (
    SELECT
        match_id,
        team_id,
        COUNT(*) AS goals
    FROM
        goal
    GROUP BY
        match_id, team_id
),
MatchScores AS (
    SELECT
        g.match_id,
        g.match_date,
        g.team1,
        COALESCE(SUM(CASE WHEN gp.team_id = g.team1 THEN gp.goals ELSE 0 END), 0) AS score1,
        g.team2,
        COALESCE(SUM(CASE WHEN gp.team_id = g.team2 THEN gp.goals ELSE 0 END), 0) AS score2
    FROM
        game g
    LEFT JOIN
        GoalsPerTeam gp
    ON
        g.match_id = gp.match_id
    GROUP BY
        g.match_id, g.match_date, g.team1, g.team2
)
SELECT
    match_id,
    match_date,
    team1,
    score1,
    team2,
    score2
FROM
    MatchScores
ORDER BY
    match_id;


/****************************************************************************************************************************/


/****************************************************************************************************************************/
#Problem 2
#https://github.com/faizanxmulla/sql-portfolio/blob/main/ankit-bansal-sql/medium-complex-sql-questions-playlist/28-exchange-seats.md

---Solution 1
SELECT
    g.match_id,
    g.match_date,
    g.team1,
    COALESCE(SUM(CASE WHEN goal.team_id = g.team1 THEN 1 ELSE 0 END), 0) AS score1,
    g.team2,
    COALESCE(SUM(CASE WHEN goal.team_id = g.team2 THEN 1 ELSE 0 END), 0) AS score2
FROM
    game g
LEFT JOIN
    goal
ON
    g.match_id = goal.match_id
GROUP BY
    g.match_id, g.match_date, g.team1, g.team2
ORDER BY
    g.match_id;


---Solution 2:
WITH CTE AS (
    SELECT id,
           student,
           LAG(id) OVER(ORDER BY id) AS prev_id,
           LEAD(id) OVER(ORDER BY id) AS next_id
    FROM seats
)
SELECT   CASE 
              WHEN id % 2 = 1 AND next_id IS NOT NULL THEN next_id
              WHEN id % 2 = 0 THEN prev_id
              ELSE id 
         END AS updated_id,
         student
FROM CTE
ORDER BY updated_id;


---Solution 3 :
SELECT   
    CASE 
        WHEN id = (SELECT MAX(id) FROM seats) AND id % 2 = 1 THEN id
        WHEN id % 2 = 0 THEN id - 1
        ELSE id + 1
    END AS updated_id,
    student
FROM     
    seats
ORDER BY 
    updated_id;
